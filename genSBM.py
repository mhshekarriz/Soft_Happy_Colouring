import networkx as nx
import numpy as np
import random, copy
#from dimacs import *

def genSBM(n, k, p, q, s,pre_coloured_pc): #n=number of vertices, k=number of partitions, p=edge probabilities inside communities, q=intercommunity edge probabilities, s=probability seed
    sizes=np.zeros(k,dtype=int)
    c=np.zeros((k,pre_coloured_pc),dtype=int) #pre-colored vertices
    comm=[]
    for i in range(k):
        comm.append([])
        sizes[i]=int(n/k)
        comm[i].append(range(i*int(n/k), (i+1)*int(n/k)))
        #c[i]=random.randint(i*int(n/k), (i+1)*int(n/k))

    if (int(n/k)!=n/k):
        for t in range(k*int(n/k),n):
            comm[t%k].append(t)
            sizes[t%k]+=1

    p1=np.ones((k,k))
    p1=q*p1
    p2=np.identity(k)
    p2=(p-q)*p2
    probs=p1+p2
    probs=probs.tolist()
    G=nx.stochastic_block_model(sizes, probs,seed=s)
    U=copy.deepcopy(set(G.nodes))
    for u in G.nodes:
        G.nodes[u]["c"]="u"


    V=[]
    for i in range(k):
        A=[]
        V.append(A)
        for j in range(pre_coloured_pc):
            c[i][j]=random.choice(list(set(range(i*int(n/k), (i+1)*int(n/k))).intersection(U)))
            G.nodes[c[i][j]]["c"]=i
            V[i].append(c[i][j])
            U.remove(c[i][j])

    return G,V,U #G=the graph, V=[V_1,...,V_k] colour classes, U=uncoloured vertices
   # filename="SBM_n="+str(n)+"_k="+str(k)+"_p="+str(round(p,2))+"_q="+str(round(q,3))+"_seed="+str(s)+".txt"

  #  dimacs(G, c, k, filename)
def write_dimacs(G, V, file_name, comment):
    k=len(V)
    with open(file_name, "w") as f:
        # write the header
        f.write("c This is a graph generated by the stochastic block model, using the command networkx.stochastic_block_model(sizes, probs,seed=s) in Python, in DIMACS format.\n")
        f.write(comment)

        f.write("p EDGE {} {} {}\n".format(G.number_of_nodes(), G.number_of_edges(), k))
        # now write all edges
        for u, v in G.edges():
            f.write("e {} {}\n".format(u, v))
        for i in range(k):
            for u in V[i]:
                f.write("n {} {}\n".format(u, i))

def read_dimacs(filename):
    G=nx.Graph()
    with open(filename, "r") as f:
        n = -1
        m = -1
        m_cnt = 0
        for i,l in enumerate(f.readlines()):
            if l[0]=='c':
                 continue
            if l[0]=='p':
                if n>=0:
                    raise ValueError("Syntax error: "+ "line {} contains a second spec line.".format(i))
                _,fmt,nstr,mstr,k = l.split()
                if fmt!='EDGE':
                     raise ValueError("Input error: "+ "Dimacs \'edge\' format expected.".format(i))
                n = int(nstr)
                m = int(mstr)
                G.add_nodes_from(range(n))
                continue
            if l[0]=='e':
                m_cnt +=1
                _,v,w=l.split()
                G.add_edge(int(v),int(w))

            if l[0]=='n':
                _,v,w=l.split()
                G.nodes[int(v)]["c"]=int(w)

    if m!=m_cnt:
        raise ValueError("Syntax error: "+"{} edges were expected.".format(m))
    return G
